#ifndef _APPLICATION_H
#define _APPLICATION_H

#include <iostream>
#include <fstream>
#include <string>
using namespace std;

#include "ArrayList.h"
#include "CircularQueueType.h"

#define FILENAMESIZE 1024

/**
*	application class for item management simply.
*/
class Application
{
public:
	/**
	*	default constructor.
	*/
	Application()
	{
		m_Command = 0;
	}
	
	/**
	*	destructor.
	*/
	~Application()	{}

	/**
	*	@brief	Program driver.
	*	@pre	program is started.
	*	@post	program is finished.
	*/
	void Run();

	/**
	*	@brief	Display command on screen and get a input from keyboard.
	*	@pre	none.
	*	@post	none.
	*	@return	user's command.
	*/
	int GetCommand();

	/**
	*	@brief	Add new record into list.
	*	@pre	list should be initialized.
	*	@post	new record is added into the list.
	*	@return	return 1 if this function works well, otherwise 0.
	*/
	int AddItem();

	/**
	*	@brief	Display recent music in the list on screen.
	*	@pre	music should have added in list.
	*	@post	Display recent music.
	*/
	void DisplayNewMusic();

	/**
	*	@brief	Display music by genre in the list on screen.
	*	@pre	music should have added in list.
	*	@post	Display music by genre.
	*/
	void DisplayMusicByGenre();

	/**
	*	@brief	Display all records in the list on screen.
	*	@pre	none.
	*	@post	none.
	*/
	void DisplayAllItem();

	/**
	*	@brief	Open a file by file descriptor as an input file.
	*	@pre	a file for reading is exist.
	*	@post	open the file for reading.
	*	@param	fileName	a filename to open for reading.
	*	@return	return 1 if this function works well, otherwise 0.
	*/
	int OpenInFile(char *fileName);

	/**
	*	@brief	Open a file by file descriptor as an output file.
	*	@pre	list should be initialized.
	*	@post	open the file for writing.
	*	@param	fileName	a filename to open for writing.
	*	@return	return 1 if this function works well, otherwise 0.
	*/
	int OpenOutFile(char *fileName);

	/**
	*	@brief	Open a file as a read mode, read all data on the file, and set list by the data.
	*	@pre	The file is not opened.
	*	@post	list holds all records from the file.
	*	@return	return 1 if this function works well, otherwise 0.
	*/
	int ReadDataFromFile();

	/**
	*	@brief	Open a file as a write mode, and write all data into the file,
	*	@pre	The file is not opened.
	*	@post	the list is stored in the output file.
	*	@return	return 1 if this function works well, otherwise 0.
	*/
	int WriteDataToFile();

	/**
	*	@brief	리스트에서 해당 제목를 가진 item을 찾는다.
	*	@pre	없음.
	*	@post	찾은 item을 출력한다.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int SearchItemById();


	/**
	*	@brief	리스트에서 해당 이름을 가진 item을 찾아 반환한다.
	*	@pre	인자로 받는 MusicInfo에 이름이 입력되어 있어야 한다.
	*	@post	찾은 item이 인자로 들어온다.
	*	@param	inData	이름이 입력되 있는 MusicInfo값.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int RetriveRecordByMemberName();

	/**
	*	@brief	리스트에서 해당 타이틀과 장르를 동시에 가진 item을 찾아 반환한다.
	*	@pre	인자로 받는 MusicInfo에 이름과 장르가 입력되어 있어야 한다.
	*	@post	찾은 item이 인자로 들어온다.
	*	@param	inData	이름과 장르가 입력되 있는 MusicInfo값.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int RetriveRecordByTitleNGenre();

	/**
	*	@brief	리스트에서 해당 이름과 장르를 동시에 가진 item을 찾아 모두 출력한다.
	*	@pre	없음.
	*	@post	찾은 모든 item이 출력된다.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int SearchListByTitleNGenre(MusicInfo &data);

	/**
	*	@brief	리스트에서 해당 이름을 가진 item을 찾아 모두 출력한다.
	*	@pre	없음.
	*	@post	찾은 모든 item이 출력된다.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int SearchListByMemberName( MusicInfo &inData );

	/**
	*	@brief	리스트에서 해당 id를 가진 item을 찾아 제거한다.
	*	@pre	입력하는 id가 리스트에 존재해야 한다.
	*	@post	리스트에 해당 item을 제거한다.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int DeleteItem();
	
	/**
	*	@brief	리스트에서 해당 id를 가진 item을 찾아 변경한다.
	*	@pre	입력하는 id가 리스트에 존재해야 한다.
	*	@post	리스트에 item이 변경된다.
	*/
	int ReplaceItem();

	/**
	*	@brief	리스트에서 해당 id를 가진 item을 이진탐색을 이용해 찾는다.
	*	@pre	없음.
	*	@post	찾은 item이 화면에 출력된다.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int SearchItemByBinarySearch();

	/**
	*	@brief	리스트에서 해당 제목을 가진 item을 찾아 모두 출력한다.
	*	@pre	없음.
	*	@post	찾은 모든 item이 출력된다.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int SearchListByTitle(MusicInfo &inData);

	/**
	*	@brief	리스트에서 해당 앨범을 가진 item을 찾아 모두 출력한다.
	*	@pre	없음.
	*	@post	찾은 모든 item이 출력된다.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int SearchListByAlbum(MusicInfo &inData);

	/**
	*	@brief	리스트에서 해당 장르를 가진 item을 찾아 모두 출력한다.
	*	@pre	없음.
	*	@post	찾은 모든 item이 출력된다.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int SearchListByGenre(MusicInfo &inData);

	/**
	*	@brief	리스트에서 해당 제목을 가진 item을 찾아 반환한다.
	*	@pre	인자로 받는 MusicInfo에 제목이 입력되어 있어야 한다.
	*	@post	찾은 item이 인자로 들어온다.
	*	@param	inData	제목이 입력되 있는 MusicInfo값.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int RetriveRecordByTitle();

	/**
	*	@brief	리스트에서 해당 앨범을 가진 item을 찾아 반환한다.
	*	@pre	인자로 받는 MusicInfo에 앨범이 입력되어 있어야 한다.
	*	@post	찾은 item이 인자로 들어온다.
	*	@param	inData	앨범이 입력되 있는 MusicInfo값.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int RetriveRecordByAlbum();

	/**
	*	@brief	리스트에서 해당 장르를 가진 item을 찾아 반환한다.
	*	@pre	인자로 받는 MusicInfo에 장르가 입력되어 있어야 한다.
	*	@post	찾은 item이 인자로 들어온다.
	*	@param	inData	장르가 입력되 있는 MusicInfo값.
	*	@return	성공시 1을 리턴, 실패시 0을 리턴.
	*/
	int RetriveRecordByGenre();

private:
	ifstream m_InFile;		///< input file descriptor.
	ofstream m_OutFile;		///< output file descriptor.
	ArrayList<MusicInfo> m_List;		///< item list.
	ArrayList<MusicGenre> g_List;		///< 장르 리스트
	CircularQueueType<int> recent_List;	///< 최근곡 리스트

	int m_Command;			///< current command number.
};

#endif	// _APPLICATION_H